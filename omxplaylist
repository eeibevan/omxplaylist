#!/bin/bash
# Required To Expand possible_extensions
shopt -s extglob

# Globs That Match Nothing Expand To Null Strings
# So, When No Media Files Match possible_extensions,
# Then We Get An Empty Array
shopt -s nullglob

# Extensions of Files To Play
# Separate With Pipes
# ex: mp4|avi
possible_extensions='@(mp3|mp4|avi)';

# The Files To Play
# May Be Overwritten By Options
media_files=(*.$possible_extensions);

# Arguments Passed To omxplayer
player_args=('--blank');

# Tests If The Passed In Argument Exists And Is Not A Shell Function
# Returns 0 If The First Argument Extsts
# Non-zero Otherwise
exists()
{
    command -v "$1" > /dev/null 2>&1
}

# omxplayer Is Required For Playing The Media Files
if ! exists 'omxplayer'; then
    echo 'Error: omxplayer not found' 1>&2
    exit 1;
fi

opts=`getopt --quiet --options d:,f:,H,L,n,r,R,s:,S --long delay:,file:,hdmi,local,no-last-record,resume,reverse,shuffle,start:,silent -- "$@"`
if [ $? -ne 0 ]; then
    echo "Error: Bad Argument" 1>&2;
    exit 1;
fi
eval set -- "$opts";


# Seconds To Delay In Between Episodes
# Managed By -d|--delay switch
delay_secs=2

# Episode To Seek To In Playlist
# Used By Both -r|--resume And -s|--start episodeNumber.ext
seek_episode='';

# Flag To Reverse media_files Array
# Used Since Reverse Must Be Processed Last
# As Other Options May Overwrite The Array
is_reverse_session=false;

# Flag To Shuffle media_files Array.
# We have to process shuffling after
# all media files have been parsed,
# but before reverse
is_shuffle_session=false;

# Flag Specifying Wether We Should Write
# A Record of The Last File Played Or Not
is_using_last_record=true;

# Flag Specifying Weather We Want Output Or Not
is_using_output=true;

# Read In A Playlist File Into media_files
read_in_file()
{
    # Reset media_files So We Can Overwrite it
    unset media_files
    media_files=();

    file=$1;
    while read line;do
        # Append To The Array
        # Space After line To Separate Elements
        media_files+=("$line");
    done < $file
}

reverse_media_files()
{
    local reversed_media_files=();
    for element in "${media_files[@]}"; do
        reversed_media_files=( "$element" "${reversed_media_files[@]}" );
    done
    media_files=( "${reversed_media_files[@]}" );
}

while true; do
    case "$1" in
        -d|--delay)
            # Test if $2 is a number
            if [ "$2" -eq "$2" 2> /dev/null ]; then
                if [ "$2" -ge 0 ]; then
                    delay_secs=$2;
                else
                    echo "Please enter a delay greater than or equal to 0" >&2;
                    exit 1;
                fi
            else
                echo "Error, $2 is not a number" >&2;
                exit 1;
            fi
            shift 2;
            ;;
        -f|--file)
            read_in_file $2;
            shift 2;
            ;;
        -H|--hdmi)
            player_args+=('--adev hdmi');
            shift;
            ;;
        -L|--local)
            player_args+=('--adev local');
            shift;
            ;;
        -n|--no-last-record)
            is_using_last_record=false;
            shift;
            ;;
        -r|--resume)
            if [ -r 'last.txt' ]; then
                seek_episode="$(<last.txt)";
            else
                echo "Error, Cannot Read Last Episode" 1>&2;
                exit 1;
            fi
            shift;
            ;;
        -R|--reverse)
            is_reverse_session=true;
            shift;
            ;;
        --shuffle)
            is_shuffle_session=true;
            shift;
            ;;
        -s|--start)
            if [ ! -r $2 ]; then
                echo "Cannot Open File $2" 1>&2;
                exit 1;
            else
                seek_episode=$2;
            fi
            shift 2;
            ;;
        -S|--silent)
            is_using_output=false;
            shift;
            ;;
        --)
            shift;
            break;
            ;;
    esac
done

# Make sure we have all the media files before shuffling
if [ "$is_shuffle_session" = true ]; then
    old_ifs=$IFS
    IFS=$'\n';
    media_files=( $(shuf -e "${media_files[@]}") );
    IFS=$old_ifs;
    unset old_ifs;
fi

# Should Be The Final Thing We Do Before Playing
# Reverse Must Be Processed Last
# As Other Options May Overwrite The Array
if [ "$is_reverse_session" = true ]; then
    reverse_media_files;
fi

for media_file in "${media_files[@]}"; do

    # If We Want To Seek To A File
    # Skip Any File That Does Not Match
    if [ ! -z "$seek_episode" ]; then
        if [ "$seek_episode" = "$media_file" ]; then
            # We Found The File, No Need To Seek Anymore
            seek_episode='';
        else
            continue;
        fi

    fi

    if [ "$is_using_output" = true ]; then
        echo $media_file;
    fi

    if [ "$is_using_last_record" = true ]; then
        # Save Current Episode For Resuming Later
        echo $media_file > last.txt;
    fi

    omxplayer ${player_args[@]} "$media_file" > /dev/null;
    wait;

    sleep $delay_secs;
done

if [ -e last.txt ]; then
    rm last.txt;
fi

